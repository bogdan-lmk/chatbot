# src/app/services/openai_vector_service.py - –≤–µ—Ä—Å–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ü–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤
from openai import OpenAI
from typing import Dict, Any, List, Optional
import tempfile
import os
from pathlib import Path
import json
from datetime import datetime

from src.app.core.config import settings
from src.app.core.logger import logger

class OpenAIVectorStoreService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Vector Stores –∏ file search"""
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.openai_api_key)
        self.vector_store_id = settings.vector_store_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vector_store_id
        if not self.vector_store_id:
            raise ValueError(
                "VECTOR_STORE_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–î–æ–±–∞–≤—å—Ç–µ VECTOR_STORE_ID=vs_... –≤ —Ñ–∞–π–ª .env"
            )
        
    def _create_safe_filename(self, original_filename: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏ —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        base_name = Path(original_filename).stem
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_name = base_name.strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        replacements = {
            ' ': '_',
            '-': '_',
            '(': '',
            ')': '',
            '[': '',
            ']': '',
            '{': '',
            '}': '',
            '.': '_',
            ',': '',
            ';': '',
            ':': '',
            '!': '',
            '?': '',
            '"': '',
            "'": '',
            '/': '_',
            '\\': '_',
            '|': '_',
            '*': '',
            '<': '',
            '>': ''
        }
        
        for old, new in replacements.items():
            clean_name = clean_name.replace(old, new)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        while '__' in clean_name:
            clean_name = clean_name.replace('__', '_')
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        clean_name = clean_name.strip('_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (OpenAI –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤)
        if len(clean_name) > 100:
            clean_name = clean_name[:100]
        
        # –ï—Å–ª–∏ –∏–º—è —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not clean_name:
            clean_name = f"document_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
        
        return f"{clean_name}.txt"
    
    def get_vector_store_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ vector store"""
        try:
            store_info = self.client.vector_stores.retrieve(self.vector_store_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files = self.client.vector_stores.files.list(
                vector_store_id=self.vector_store_id
            )
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Vector Store: {store_info.name}")
            
            return {
                "success": True,
                "vector_store_id": self.vector_store_id,
                "name": getattr(store_info, 'name', 'Unknown'),
                "file_counts": getattr(store_info, 'file_counts', {"total": 0, "completed": 0}),
                "status": getattr(store_info, 'status', 'unknown'),
                "created_at": getattr(store_info, 'created_at', 0),
                "usage_bytes": getattr(store_info, 'usage_bytes', 0),
                "files": [
                    {
                        "id": f.id,
                        "status": getattr(f, 'status', 'unknown'),
                        "created_at": getattr(f, 'created_at', 0)
                    }
                    for f in files.data
                ] if hasattr(files, 'data') else []
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vector store: {e}")
            return {
                "success": False,
                "error": str(e),
                "vector_store_id": self.vector_store_id
            }
    
    async def upload_text_as_file(self, text_content: str, filename: str, metadata: Dict = None) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ OpenAI Vector Store"""
        
        try:
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º: {filename} ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_filename = self._create_safe_filename(filename)
            logger.info(f"üìù –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {safe_filename}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            with tempfile.NamedTemporaryFile(
                mode='w', 
                suffix='.txt', 
                delete=False, 
                encoding='utf-8'
            ) as tmp_file:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                file_header = f"""# {safe_filename}
# –ò—Å—Ç–æ—á–Ω–∏–∫ PDF: {filename}
# –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.utcnow().isoformat()}
# –†–∞–∑–º–µ—Ä: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤
# Vector Store: {self.vector_store_id}

"""
                if metadata:
                    file_header += f"# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(metadata, ensure_ascii=False)}\n\n"
                
                file_header += "="*50 + "\n"
                file_header += f"–°–û–î–ï–†–ñ–ò–ú–û–ï –î–û–ö–£–ú–ï–ù–¢–ê: {filename}\n"
                file_header += "="*50 + "\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                tmp_file.write(file_header + text_content)
                tmp_file_path = tmp_file.name
            
            try:
                logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ OpenAI Files API —Å –∏–º–µ–Ω–µ–º: {safe_filename}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ OpenAI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                with open(tmp_file_path, 'rb') as f:
                    file_obj = self.client.files.create(
                        file=(safe_filename, f),  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (–∏–º—è, —Ñ–∞–π–ª)
                        purpose='assistants'
                    )
                
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ OpenAI: {file_obj.id}")
                logger.info(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –≤ OpenAI: {file_obj.filename}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ vector store
                logger.info(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Vector Store...")
                
                vector_file = self.client.vector_stores.files.create(
                    vector_store_id=self.vector_store_id,
                    file_id=file_obj.id
                )
                
                logger.info(f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ Vector Store: {vector_file.id}, —Å—Ç–∞—Ç—É—Å: {vector_file.status}")
                
                return {
                    "success": True,
                    "original_filename": filename,
                    "openai_filename": file_obj.filename,
                    "safe_filename": safe_filename,
                    "vector_store_id": self.vector_store_id,
                    "total_chunks": 1,  # –û–¥–∏–Ω —Ñ–∞–π–ª
                    "uploaded_files": [{
                        "file_id": file_obj.id,
                        "vector_store_file_id": vector_file.id,
                        "original_name": filename,
                        "openai_name": file_obj.filename,
                        "safe_name": safe_filename,
                        "file_status": file_obj.status,
                        "vector_status": vector_file.status,
                        "file_size_chars": len(text_content)
                    }],
                    "total_chars": len(text_content),
                    "metadata": metadata,
                    "upload_method": "whole_file"
                }
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(tmp_file_path)
                    logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {tmp_file_path}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ vector store: {e}")
            return {
                "success": False,
                "error": str(e),
                "filename": filename
            }
    
    def search_in_vector_store(self, query: str, limit: int = 5) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –≤ vector store —á–µ—Ä–µ–∑ assistant"""
        try:
            logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: '{query}'")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π assistant –¥–ª—è –ø–æ–∏—Å–∫–∞
            assistant = self.client.beta.assistants.create(
                name="Search Assistant",
                instructions="–ù–∞–π–¥–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤.",
                model="gpt-4o",
                tools=[{"type": "file_search"}],
                tool_resources={
                    "file_search": {
                        "vector_store_ids": [self.vector_store_id]
                    }
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º thread –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            thread = self.client.beta.threads.create()
            
            self.client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=query
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º assistant
            run = self.client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=assistant.id
            )
            
            logger.info(f"üîÑ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç assistant...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            import time
            max_attempts = 60  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            for attempt in range(max_attempts):
                run_status = self.client.beta.threads.runs.retrieve(
                    thread_id=thread.id,
                    run_id=run.id
                )
                
                if run_status.status == "completed":
                    logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    break
                elif run_status.status in ["failed", "cancelled", "expired"]:
                    raise Exception(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run_status.status}")
                elif attempt % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {run_status.status} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                
                time.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            messages = self.client.beta.threads.messages.list(
                thread_id=thread.id,
                limit=1
            )
            
            if messages.data:
                response = messages.data[0].content[0].text.value
                annotations = getattr(messages.data[0].content[0].text, 'annotations', [])
                
                # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                try:
                    self.client.beta.assistants.delete(assistant.id)
                    logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π assistant —É–¥–∞–ª–µ–Ω")
                except:
                    pass
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(annotations)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                
                return {
                    "success": True,
                    "response": response,
                    "annotations": annotations,
                    "sources_count": len(annotations)
                }
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç assistant")
                return {
                    "success": False,
                    "error": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç assistant"
                }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ vector store: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def delete_file_from_vector_store(self, file_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ vector store"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª: {file_id}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ vector store
            self.client.vector_stores.files.delete(
                vector_store_id=self.vector_store_id,
                file_id=file_id
            )
            
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∞–º —Ñ–∞–π–ª
            self.client.files.delete(file_id)
            
            logger.info(f"‚úÖ –§–∞–π–ª {file_id} —É–¥–∞–ª–µ–Ω –∏–∑ vector store")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return False